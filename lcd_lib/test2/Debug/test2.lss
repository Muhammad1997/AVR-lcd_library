
test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000452  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f4  00800060  00000452  000004c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001222  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080e  00000000  00000000  000018da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000736  00000000  00000000  000020e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000158  00000000  00000000  00002820  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000432  00000000  00000000  00002978  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000869  00000000  00000000  00002daa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00003613  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 35       	cpi	r26, 0x54	; 84
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 fe 00 	call	0x1fc	; 0x1fc <main>
  7a:	0c 94 27 02 	jmp	0x44e	; 0x44e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <custom_build>:
    }
}


//function to define then build custom characters "10,11,12,13,14,15,16" charsracters
void custom_build(void){
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	e8 97       	sbiw	r28, 0x38	; 56
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char Character10[8] = { 0x17,0x15,0x15,0x15,0x15,0x15,0x17,0x00 };  /* Custom char set for alphanumeric LCD Module */
  96:	88 e0       	ldi	r24, 0x08	; 8
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	8a 95       	dec	r24
  a6:	e1 f7       	brne	.-8      	; 0xa0 <custom_build+0x1e>
	unsigned char Character11[8] = { 0x12,0x12,0x12,0x12,0x12,0x12,0x12,0x00 };
  a8:	88 e0       	ldi	r24, 0x08	; 8
  aa:	e8 e6       	ldi	r30, 0x68	; 104
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	de 01       	movw	r26, r28
  b0:	19 96       	adiw	r26, 0x09	; 9
  b2:	01 90       	ld	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	8a 95       	dec	r24
  b8:	e1 f7       	brne	.-8      	; 0xb2 <custom_build+0x30>
	unsigned char Character12[8] = { 0x17,0x11,0x11,0x17,0x14,0x14,0x17,0x00 };
  ba:	88 e0       	ldi	r24, 0x08	; 8
  bc:	e0 e7       	ldi	r30, 0x70	; 112
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	de 01       	movw	r26, r28
  c2:	51 96       	adiw	r26, 0x11	; 17
  c4:	01 90       	ld	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	8a 95       	dec	r24
  ca:	e1 f7       	brne	.-8      	; 0xc4 <custom_build+0x42>
	unsigned char Character13[8] = { 0x17,0x11,0x11,0x17,0x11,0x11,0x17,0x00 };
  cc:	88 e0       	ldi	r24, 0x08	; 8
  ce:	e8 e7       	ldi	r30, 0x78	; 120
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	de 01       	movw	r26, r28
  d4:	59 96       	adiw	r26, 0x19	; 25
  d6:	01 90       	ld	r0, Z+
  d8:	0d 92       	st	X+, r0
  da:	8a 95       	dec	r24
  dc:	e1 f7       	brne	.-8      	; 0xd6 <custom_build+0x54>
	unsigned char Character14[8] = { 0x15,0x15,0x15,0x17,0x11,0x11,0x11,0x00 };
  de:	88 e0       	ldi	r24, 0x08	; 8
  e0:	e0 e8       	ldi	r30, 0x80	; 128
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	de 01       	movw	r26, r28
  e6:	91 96       	adiw	r26, 0x21	; 33
  e8:	01 90       	ld	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	8a 95       	dec	r24
  ee:	e1 f7       	brne	.-8      	; 0xe8 <custom_build+0x66>
	unsigned char Character15[8] = { 0x17,0x14,0x14,0x17,0x11,0x11,0x17,0x00 };
  f0:	88 e0       	ldi	r24, 0x08	; 8
  f2:	e8 e8       	ldi	r30, 0x88	; 136
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	de 01       	movw	r26, r28
  f8:	99 96       	adiw	r26, 0x29	; 41
  fa:	01 90       	ld	r0, Z+
  fc:	0d 92       	st	X+, r0
  fe:	8a 95       	dec	r24
 100:	e1 f7       	brne	.-8      	; 0xfa <custom_build+0x78>
	unsigned char Character16[8] = { 0x17,0x14,0x14,0x17,0x15,0x15,0x17,0x00 };
 102:	88 e0       	ldi	r24, 0x08	; 8
 104:	e0 e9       	ldi	r30, 0x90	; 144
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	de 01       	movw	r26, r28
 10a:	d1 96       	adiw	r26, 0x31	; 49
 10c:	01 90       	ld	r0, Z+
 10e:	0d 92       	st	X+, r0
 110:	8a 95       	dec	r24
 112:	e1 f7       	brne	.-8      	; 0x10c <custom_build+0x8a>
    Lcd_Init();
 114:	0e 94 56 01 	call	0x2ac	; 0x2ac <Lcd_Init>
	Lcd_Custom_Char(0, Character10);  /* Build Character1 at position 0 */
 118:	be 01       	movw	r22, r28
 11a:	6f 5f       	subi	r22, 0xFF	; 255
 11c:	7f 4f       	sbci	r23, 0xFF	; 255
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	0e 94 b2 01 	call	0x364	; 0x364 <Lcd_Custom_Char>
	Lcd_Custom_Char(1, Character11);  /* Build Character2 at position 1 */
 124:	be 01       	movw	r22, r28
 126:	67 5f       	subi	r22, 0xF7	; 247
 128:	7f 4f       	sbci	r23, 0xFF	; 255
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	0e 94 b2 01 	call	0x364	; 0x364 <Lcd_Custom_Char>
	Lcd_Custom_Char(2, Character12);  /* Build Character3 at position 2 */
 130:	be 01       	movw	r22, r28
 132:	6f 5e       	subi	r22, 0xEF	; 239
 134:	7f 4f       	sbci	r23, 0xFF	; 255
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	0e 94 b2 01 	call	0x364	; 0x364 <Lcd_Custom_Char>
	Lcd_Custom_Char(3, Character13);  /* Build Character4 at position 3 */
 13c:	be 01       	movw	r22, r28
 13e:	67 5e       	subi	r22, 0xE7	; 231
 140:	7f 4f       	sbci	r23, 0xFF	; 255
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	0e 94 b2 01 	call	0x364	; 0x364 <Lcd_Custom_Char>
	Lcd_Custom_Char(4, Character14);  /* Build Character5 at position 4 */
 148:	be 01       	movw	r22, r28
 14a:	6f 5d       	subi	r22, 0xDF	; 223
 14c:	7f 4f       	sbci	r23, 0xFF	; 255
 14e:	84 e0       	ldi	r24, 0x04	; 4
 150:	0e 94 b2 01 	call	0x364	; 0x364 <Lcd_Custom_Char>
	Lcd_Custom_Char(5, Character15);  /* Build Character6 at position 5 */
 154:	be 01       	movw	r22, r28
 156:	67 5d       	subi	r22, 0xD7	; 215
 158:	7f 4f       	sbci	r23, 0xFF	; 255
 15a:	85 e0       	ldi	r24, 0x05	; 5
 15c:	0e 94 b2 01 	call	0x364	; 0x364 <Lcd_Custom_Char>
	Lcd_Custom_Char(6, Character16);  /* Build Character6 at position 6 */
 160:	be 01       	movw	r22, r28
 162:	6f 5c       	subi	r22, 0xCF	; 207
 164:	7f 4f       	sbci	r23, 0xFF	; 255
 166:	86 e0       	ldi	r24, 0x06	; 6
 168:	0e 94 b2 01 	call	0x364	; 0x364 <Lcd_Custom_Char>
}
 16c:	e8 96       	adiw	r28, 0x38	; 56
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	f8 94       	cli
 172:	de bf       	out	0x3e, r29	; 62
 174:	0f be       	out	0x3f, r0	; 63
 176:	cd bf       	out	0x3d, r28	; 61
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <print>:

//function to print from 1 to 16 on lcd
void print(void){
 17e:	ff 92       	push	r15
 180:	0f 93       	push	r16
 182:	1f 93       	push	r17
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
	custom_build();
 188:	0e 94 41 00 	call	0x82	; 0x82 <custom_build>
	char i,j;
	for (i=0;i<2;i++)
 18c:	f1 2c       	mov	r15, r1
 18e:	2c c0       	rjmp	.+88     	; 0x1e8 <print+0x6a>
	{
		char s;
		for (j=1;j<10;j++)
		{
		s = itoa(j,s,10);	
 190:	6d 2f       	mov	r22, r29
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	4a e0       	ldi	r20, 0x0A	; 10
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	c8 01       	movw	r24, r16
 19a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <itoa>
 19e:	d8 2f       	mov	r29, r24
		Lcd_Out(i,j-1,s);
 1a0:	ac 01       	movw	r20, r24
 1a2:	55 27       	eor	r21, r21
 1a4:	6c 2f       	mov	r22, r28
 1a6:	8f 2d       	mov	r24, r15
 1a8:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <Lcd_Out>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ac:	83 ed       	ldi	r24, 0xD3	; 211
 1ae:	90 e3       	ldi	r25, 0x30	; 48
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <print+0x32>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <print+0x38>
 1b6:	00 00       	nop
 1b8:	cf 5f       	subi	r28, 0xFF	; 255
 1ba:	0f 5f       	subi	r16, 0xFF	; 255
 1bc:	1f 4f       	sbci	r17, 0xFF	; 255
	custom_build();
	char i,j;
	for (i=0;i<2;i++)
	{
		char s;
		for (j=1;j<10;j++)
 1be:	c9 30       	cpi	r28, 0x09	; 9
 1c0:	39 f7       	brne	.-50     	; 0x190 <print+0x12>
		_delay_ms(50);
			
		}
		for (j=9;j<17;j++)
		{
		Lcd_Custom_Out(i,j,j-9);
 1c2:	47 ef       	ldi	r20, 0xF7	; 247
 1c4:	4c 0f       	add	r20, r28
 1c6:	6c 2f       	mov	r22, r28
 1c8:	8f 2d       	mov	r24, r15
 1ca:	0e 94 cd 01 	call	0x39a	; 0x39a <Lcd_Custom_Out>
 1ce:	83 ed       	ldi	r24, 0xD3	; 211
 1d0:	90 e3       	ldi	r25, 0x30	; 48
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <print+0x54>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <print+0x5a>
 1d8:	00 00       	nop
		s = itoa(j,s,10);	
		Lcd_Out(i,j-1,s);
		_delay_ms(50);
			
		}
		for (j=9;j<17;j++)
 1da:	cf 5f       	subi	r28, 0xFF	; 255
 1dc:	c1 31       	cpi	r28, 0x11	; 17
 1de:	89 f7       	brne	.-30     	; 0x1c2 <print+0x44>

//function to print from 1 to 16 on lcd
void print(void){
	custom_build();
	char i,j;
	for (i=0;i<2;i++)
 1e0:	f3 94       	inc	r15
 1e2:	92 e0       	ldi	r25, 0x02	; 2
 1e4:	f9 16       	cp	r15, r25
 1e6:	21 f0       	breq	.+8      	; 0x1f0 <print+0x72>
	Lcd_Custom_Char(5, Character15);  /* Build Character6 at position 5 */
	Lcd_Custom_Char(6, Character16);  /* Build Character6 at position 6 */
}

//function to print from 1 to 16 on lcd
void print(void){
 1e8:	01 e0       	ldi	r16, 0x01	; 1
 1ea:	10 e0       	ldi	r17, 0x00	; 0
 1ec:	c0 e0       	ldi	r28, 0x00	; 0
 1ee:	d0 cf       	rjmp	.-96     	; 0x190 <print+0x12>
		{
		Lcd_Custom_Out(i,j,j-9);
		_delay_ms(50);	
		}
	}
}
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	1f 91       	pop	r17
 1f6:	0f 91       	pop	r16
 1f8:	ff 90       	pop	r15
 1fa:	08 95       	ret

000001fc <main>:
void print(void);

int main(void)
{	
	
	Lcd_Init();
 1fc:	0e 94 56 01 	call	0x2ac	; 0x2ac <Lcd_Init>
	Lcd_Clear();
 200:	0e 94 98 01 	call	0x330	; 0x330 <Lcd_Clear>
	Lcd_Out(0,0,"AVR LCD library");
 204:	48 e9       	ldi	r20, 0x98	; 152
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <Lcd_Out>
 210:	2f e3       	ldi	r18, 0x3F	; 63
 212:	8d e0       	ldi	r24, 0x0D	; 13
 214:	93 e0       	ldi	r25, 0x03	; 3
 216:	21 50       	subi	r18, 0x01	; 1
 218:	80 40       	sbci	r24, 0x00	; 0
 21a:	90 40       	sbci	r25, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <main+0x1a>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <main+0x24>
 220:	00 00       	nop
	_delay_ms(1000);
	Lcd_Clear();
 222:	0e 94 98 01 	call	0x330	; 0x330 <Lcd_Clear>
 226:	83 e2       	ldi	r24, 0x23	; 35
 228:	94 ef       	ldi	r25, 0xF4	; 244
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <main+0x2e>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <main+0x34>
 230:	00 00       	nop
	_delay_ms(250);
    while (1) 
    {
	print();
 232:	0e 94 bf 00 	call	0x17e	; 0x17e <print>
 236:	9f e3       	ldi	r25, 0x3F	; 63
 238:	2d e0       	ldi	r18, 0x0D	; 13
 23a:	83 e0       	ldi	r24, 0x03	; 3
 23c:	91 50       	subi	r25, 0x01	; 1
 23e:	20 40       	sbci	r18, 0x00	; 0
 240:	80 40       	sbci	r24, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <main+0x40>
 244:	00 c0       	rjmp	.+0      	; 0x246 <main+0x4a>
 246:	00 00       	nop
	_delay_ms(1000);
	Lcd_Clear();
 248:	0e 94 98 01 	call	0x330	; 0x330 <Lcd_Clear>
 24c:	83 e2       	ldi	r24, 0x23	; 35
 24e:	94 ef       	ldi	r25, 0xF4	; 244
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <main+0x54>
 254:	00 c0       	rjmp	.+0      	; 0x256 <main+0x5a>
 256:	00 00       	nop
 258:	ec cf       	rjmp	.-40     	; 0x232 <main+0x36>

0000025a <Lcd_Cmd>:
	else if (strcmp(Command,"_LCD_SHIFT_LEFT") == 0){cmnd = 0x18;}
	else if (strcmp(Command,"_LCD_SHIFT_RIGHT") == 0){cmnd = 0x1C;}
	//else    {cmnd = Command;}
	Lcd_Cmd(cmnd);	
	
}
 25a:	88 bb       	out	0x18, r24	; 24
 25c:	a8 98       	cbi	0x15, 0	; 21
 25e:	a9 98       	cbi	0x15, 1	; 21
 260:	ae 9a       	sbi	0x15, 6	; 21
 262:	00 00       	nop
 264:	ae 98       	cbi	0x15, 6	; 21
 266:	83 ef       	ldi	r24, 0xF3	; 243
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <Lcd_Cmd+0x10>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <Lcd_Cmd+0x16>
 270:	00 00       	nop
 272:	08 95       	ret

00000274 <Lcd_Chr>:
	Lcd_Out(0,0," ");
}

void Lcd_Chr(unsigned char char_data)  /* LCD data write function */
{
	LCD_Data_Port= char_data;
 274:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
 276:	a8 9a       	sbi	0x15, 0	; 21
	LCD_Command_Port &= ~(1<<RW);	/* RW=0 write operation */
 278:	a9 98       	cbi	0x15, 1	; 21
	LCD_Command_Port |= (1<<EN);	/* Enable Pulse */
 27a:	ae 9a       	sbi	0x15, 6	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27c:	00 00       	nop
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 27e:	ae 98       	cbi	0x15, 6	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 280:	83 ef       	ldi	r24, 0xF3	; 243
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <Lcd_Chr+0x10>
 288:	00 c0       	rjmp	.+0      	; 0x28a <Lcd_Chr+0x16>
 28a:	00 00       	nop
 28c:	08 95       	ret

0000028e <Lcd_Out_Cp>:
	_delay_ms(2);			/* Data write delay */
}

void Lcd_Out_Cp(char *str)		/* Send string to LCD function */
{
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	ec 01       	movw	r28, r24
	for(int i = 0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 294:	88 81       	ld	r24, Y
 296:	88 23       	and	r24, r24
 298:	31 f0       	breq	.+12     	; 0x2a6 <Lcd_Out_Cp+0x18>
 29a:	21 96       	adiw	r28, 0x01	; 1
	{
		Lcd_Chr(str[i]);
 29c:	0e 94 3a 01 	call	0x274	; 0x274 <Lcd_Chr>
	_delay_ms(2);			/* Data write delay */
}

void Lcd_Out_Cp(char *str)		/* Send string to LCD function */
{
	for(int i = 0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 2a0:	89 91       	ld	r24, Y+
 2a2:	81 11       	cpse	r24, r1
 2a4:	fb cf       	rjmp	.-10     	; 0x29c <Lcd_Out_Cp+0xe>
	{
		Lcd_Chr(str[i]);
	}
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <Lcd_Init>:
	
}

void Lcd_Init (void)			/* LCD Initialize function */
{
	LCD_Command_Dir = 0xFF;		/* Make LCD command port direction as o/p */
 2ac:	8f ef       	ldi	r24, 0xFF	; 255
 2ae:	84 bb       	out	0x14, r24	; 20
	LCD_Data_Dir = 0xFF;		/* Make LCD data port direction as o/p */
 2b0:	87 bb       	out	0x17, r24	; 23
 2b2:	87 e8       	ldi	r24, 0x87	; 135
 2b4:	93 e1       	ldi	r25, 0x13	; 19
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <Lcd_Init+0xa>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <Lcd_Init+0x10>
 2bc:	00 00       	nop
	_delay_ms(20);			/* LCD Power ON delay always >15ms */
	
	Lcd_Cmd (0x38);		/* Initialization of 16X2 LCD in 8bit mode */
 2be:	88 e3       	ldi	r24, 0x38	; 56
 2c0:	0e 94 2d 01 	call	0x25a	; 0x25a <Lcd_Cmd>
	Lcd_Cmd (0x0C);		/* Display ON Cursor OFF */
 2c4:	8c e0       	ldi	r24, 0x0C	; 12
 2c6:	0e 94 2d 01 	call	0x25a	; 0x25a <Lcd_Cmd>
	Lcd_Cmd (0x06);		/* Auto Increment cursor */
 2ca:	86 e0       	ldi	r24, 0x06	; 6
 2cc:	0e 94 2d 01 	call	0x25a	; 0x25a <Lcd_Cmd>
	Lcd_Cmd (0x01);		/* clear display */
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	0e 94 2d 01 	call	0x25a	; 0x25a <Lcd_Cmd>
 2d6:	83 ef       	ldi	r24, 0xF3	; 243
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <Lcd_Init+0x2e>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <Lcd_Init+0x34>
 2e0:	00 00       	nop
	_delay_ms(2);			/* Clear display command delay> 1.63 ms */
	Lcd_Cmd (0x80);		/* Cursor at home position */
 2e2:	80 e8       	ldi	r24, 0x80	; 128
 2e4:	0e 94 2d 01 	call	0x25a	; 0x25a <Lcd_Cmd>
}

void Lcd_Out(char row, char pos, char *str)  /* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
	Lcd_Cmd((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
 2e8:	80 e8       	ldi	r24, 0x80	; 128
 2ea:	0e 94 2d 01 	call	0x25a	; 0x25a <Lcd_Cmd>
	else if (row == 1 && pos<16)
	Lcd_Cmd((pos & 0x0F)|0xC0);	/* Command of sec row and required position<16 */
	Lcd_Out_Cp(str);		/* Call LCD string function */
 2ee:	82 e5       	ldi	r24, 0x52	; 82
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	0e 94 47 01 	call	0x28e	; 0x28e <Lcd_Out_Cp>
 2f6:	08 95       	ret

000002f8 <Lcd_Out>:
		Lcd_Chr(str[i]);
	}
}

void Lcd_Out(char row, char pos, char *str)  /* Send string to LCD with xy position */
{
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	ea 01       	movw	r28, r20
	if (row == 0 && pos<16)
 2fe:	81 11       	cpse	r24, r1
 300:	08 c0       	rjmp	.+16     	; 0x312 <Lcd_Out+0x1a>
 302:	60 31       	cpi	r22, 0x10	; 16
 304:	78 f4       	brcc	.+30     	; 0x324 <Lcd_Out+0x2c>
	Lcd_Cmd((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
 306:	86 2f       	mov	r24, r22
 308:	8f 70       	andi	r24, 0x0F	; 15
 30a:	80 68       	ori	r24, 0x80	; 128
 30c:	0e 94 2d 01 	call	0x25a	; 0x25a <Lcd_Cmd>
 310:	09 c0       	rjmp	.+18     	; 0x324 <Lcd_Out+0x2c>
	else if (row == 1 && pos<16)
 312:	81 30       	cpi	r24, 0x01	; 1
 314:	39 f4       	brne	.+14     	; 0x324 <Lcd_Out+0x2c>
 316:	60 31       	cpi	r22, 0x10	; 16
 318:	28 f4       	brcc	.+10     	; 0x324 <Lcd_Out+0x2c>
	Lcd_Cmd((pos & 0x0F)|0xC0);	/* Command of sec row and required position<16 */
 31a:	86 2f       	mov	r24, r22
 31c:	8f 70       	andi	r24, 0x0F	; 15
 31e:	80 6c       	ori	r24, 0xC0	; 192
 320:	0e 94 2d 01 	call	0x25a	; 0x25a <Lcd_Cmd>
	Lcd_Out_Cp(str);		/* Call LCD string function */
 324:	ce 01       	movw	r24, r28
 326:	0e 94 47 01 	call	0x28e	; 0x28e <Lcd_Out_Cp>
}
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	08 95       	ret

00000330 <Lcd_Clear>:

void Lcd_Clear()
{
	Lcd_Cmd (0x0C);		/* Display ON Cursor OFF */
 330:	8c e0       	ldi	r24, 0x0C	; 12
 332:	0e 94 2d 01 	call	0x25a	; 0x25a <Lcd_Cmd>
	Lcd_Cmd (0x06);		/* Auto Increment cursor */
 336:	86 e0       	ldi	r24, 0x06	; 6
 338:	0e 94 2d 01 	call	0x25a	; 0x25a <Lcd_Cmd>
	Lcd_Cmd (0x01);		/* clear display */
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	0e 94 2d 01 	call	0x25a	; 0x25a <Lcd_Cmd>
 342:	83 ef       	ldi	r24, 0xF3	; 243
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <Lcd_Clear+0x16>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <Lcd_Clear+0x1c>
 34c:	00 00       	nop
	_delay_ms(2);			/* Clear display command delay> 1.63 ms */
	Lcd_Cmd (0x80);		/* Cursor at home position */
 34e:	80 e8       	ldi	r24, 0x80	; 128
 350:	0e 94 2d 01 	call	0x25a	; 0x25a <Lcd_Cmd>
}

void Lcd_Out(char row, char pos, char *str)  /* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
	Lcd_Cmd((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
 354:	80 e8       	ldi	r24, 0x80	; 128
 356:	0e 94 2d 01 	call	0x25a	; 0x25a <Lcd_Cmd>
	else if (row == 1 && pos<16)
	Lcd_Cmd((pos & 0x0F)|0xC0);	/* Command of sec row and required position<16 */
	Lcd_Out_Cp(str);		/* Call LCD string function */
 35a:	82 e5       	ldi	r24, 0x52	; 82
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	0e 94 47 01 	call	0x28e	; 0x28e <Lcd_Out_Cp>
 362:	08 95       	ret

00000364 <Lcd_Custom_Char>:
	Lcd_Cmd (0x80);		/* Cursor at home position */
	Lcd_Out(0,0," ");
}

void Lcd_Custom_Char (unsigned char loc, unsigned char *msg)
{
 364:	0f 93       	push	r16
 366:	1f 93       	push	r17
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
	unsigned char i;
	if(loc<8)
 36c:	88 30       	cpi	r24, 0x08	; 8
 36e:	80 f4       	brcc	.+32     	; 0x390 <Lcd_Custom_Char+0x2c>
 370:	8b 01       	movw	r16, r22
	{
		Lcd_Cmd (0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
 372:	88 0f       	add	r24, r24
 374:	88 0f       	add	r24, r24
 376:	88 0f       	add	r24, r24
 378:	80 5c       	subi	r24, 0xC0	; 192
 37a:	0e 94 2d 01 	call	0x25a	; 0x25a <Lcd_Cmd>
 37e:	e8 01       	movw	r28, r16
 380:	08 5f       	subi	r16, 0xF8	; 248
 382:	1f 4f       	sbci	r17, 0xFF	; 255
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
		Lcd_Chr(msg[i]);
 384:	89 91       	ld	r24, Y+
 386:	0e 94 3a 01 	call	0x274	; 0x274 <Lcd_Chr>
{
	unsigned char i;
	if(loc<8)
	{
		Lcd_Cmd (0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
 38a:	c0 17       	cp	r28, r16
 38c:	d1 07       	cpc	r29, r17
 38e:	d1 f7       	brne	.-12     	; 0x384 <Lcd_Custom_Char+0x20>
		Lcd_Chr(msg[i]);
	}
}
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	1f 91       	pop	r17
 396:	0f 91       	pop	r16
 398:	08 95       	ret

0000039a <Lcd_Custom_Out>:

void Lcd_Custom_Out(char row, char pos,char loc)  /* Send Custom char to LCD with xy position */
{
 39a:	cf 93       	push	r28
 39c:	c4 2f       	mov	r28, r20
	if (row == 0 && pos<16)
 39e:	81 11       	cpse	r24, r1
 3a0:	08 c0       	rjmp	.+16     	; 0x3b2 <Lcd_Custom_Out+0x18>
 3a2:	60 31       	cpi	r22, 0x10	; 16
 3a4:	78 f4       	brcc	.+30     	; 0x3c4 <Lcd_Custom_Out+0x2a>
	Lcd_Cmd((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
 3a6:	86 2f       	mov	r24, r22
 3a8:	8f 70       	andi	r24, 0x0F	; 15
 3aa:	80 68       	ori	r24, 0x80	; 128
 3ac:	0e 94 2d 01 	call	0x25a	; 0x25a <Lcd_Cmd>
 3b0:	09 c0       	rjmp	.+18     	; 0x3c4 <Lcd_Custom_Out+0x2a>
	else if (row == 1 && pos<16)
 3b2:	81 30       	cpi	r24, 0x01	; 1
 3b4:	39 f4       	brne	.+14     	; 0x3c4 <Lcd_Custom_Out+0x2a>
 3b6:	60 31       	cpi	r22, 0x10	; 16
 3b8:	28 f4       	brcc	.+10     	; 0x3c4 <Lcd_Custom_Out+0x2a>
	Lcd_Cmd((pos & 0x0F)|0xC0);	/* Command of sec row and required position<16 */
 3ba:	86 2f       	mov	r24, r22
 3bc:	8f 70       	andi	r24, 0x0F	; 15
 3be:	80 6c       	ori	r24, 0xC0	; 192
 3c0:	0e 94 2d 01 	call	0x25a	; 0x25a <Lcd_Cmd>
	Lcd_Chr(loc);		
 3c4:	8c 2f       	mov	r24, r28
 3c6:	0e 94 3a 01 	call	0x274	; 0x274 <Lcd_Chr>
 3ca:	cf 91       	pop	r28
 3cc:	08 95       	ret

000003ce <itoa>:
 3ce:	45 32       	cpi	r20, 0x25	; 37
 3d0:	51 05       	cpc	r21, r1
 3d2:	20 f4       	brcc	.+8      	; 0x3dc <itoa+0xe>
 3d4:	42 30       	cpi	r20, 0x02	; 2
 3d6:	10 f0       	brcs	.+4      	; 0x3dc <itoa+0xe>
 3d8:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__itoa_ncheck>
 3dc:	fb 01       	movw	r30, r22
 3de:	10 82       	st	Z, r1
 3e0:	cb 01       	movw	r24, r22
 3e2:	08 95       	ret

000003e4 <__itoa_ncheck>:
 3e4:	bb 27       	eor	r27, r27
 3e6:	4a 30       	cpi	r20, 0x0A	; 10
 3e8:	31 f4       	brne	.+12     	; 0x3f6 <__itoa_ncheck+0x12>
 3ea:	99 23       	and	r25, r25
 3ec:	22 f4       	brpl	.+8      	; 0x3f6 <__itoa_ncheck+0x12>
 3ee:	bd e2       	ldi	r27, 0x2D	; 45
 3f0:	90 95       	com	r25
 3f2:	81 95       	neg	r24
 3f4:	9f 4f       	sbci	r25, 0xFF	; 255
 3f6:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__utoa_common>

000003fa <__utoa_ncheck>:
 3fa:	bb 27       	eor	r27, r27

000003fc <__utoa_common>:
 3fc:	fb 01       	movw	r30, r22
 3fe:	55 27       	eor	r21, r21
 400:	aa 27       	eor	r26, r26
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	aa 1f       	adc	r26, r26
 408:	a4 17       	cp	r26, r20
 40a:	10 f0       	brcs	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40c:	a4 1b       	sub	r26, r20
 40e:	83 95       	inc	r24
 410:	50 51       	subi	r21, 0x10	; 16
 412:	b9 f7       	brne	.-18     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 414:	a0 5d       	subi	r26, 0xD0	; 208
 416:	aa 33       	cpi	r26, 0x3A	; 58
 418:	08 f0       	brcs	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41a:	a9 5d       	subi	r26, 0xD9	; 217
 41c:	a1 93       	st	Z+, r26
 41e:	00 97       	sbiw	r24, 0x00	; 0
 420:	79 f7       	brne	.-34     	; 0x400 <__LOCK_REGION_LENGTH__>
 422:	b1 11       	cpse	r27, r1
 424:	b1 93       	st	Z+, r27
 426:	11 92       	st	Z+, r1
 428:	cb 01       	movw	r24, r22
 42a:	0c 94 17 02 	jmp	0x42e	; 0x42e <strrev>

0000042e <strrev>:
 42e:	dc 01       	movw	r26, r24
 430:	fc 01       	movw	r30, r24
 432:	67 2f       	mov	r22, r23
 434:	71 91       	ld	r23, Z+
 436:	77 23       	and	r23, r23
 438:	e1 f7       	brne	.-8      	; 0x432 <strrev+0x4>
 43a:	32 97       	sbiw	r30, 0x02	; 2
 43c:	04 c0       	rjmp	.+8      	; 0x446 <strrev+0x18>
 43e:	7c 91       	ld	r23, X
 440:	6d 93       	st	X+, r22
 442:	70 83       	st	Z, r23
 444:	62 91       	ld	r22, -Z
 446:	ae 17       	cp	r26, r30
 448:	bf 07       	cpc	r27, r31
 44a:	c8 f3       	brcs	.-14     	; 0x43e <strrev+0x10>
 44c:	08 95       	ret

0000044e <_exit>:
 44e:	f8 94       	cli

00000450 <__stop_program>:
 450:	ff cf       	rjmp	.-2      	; 0x450 <__stop_program>
